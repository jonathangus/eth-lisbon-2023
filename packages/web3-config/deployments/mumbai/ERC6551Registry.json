{
  "address": "0xaeC544536a6405A2422745b7D7EBA7655844554B",
  "abi": [
    {
      "inputs": [],
      "name": "InitializationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "account",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef64da0cc5e80b07d4542b95fdc49acf3f92e4760cf603eae1fae50ccd3e090b",
  "receipt": {
    "to": null,
    "from": "0xAd88438F0DF2939e383648D7d2c783C47086A5e6",
    "contractAddress": "0xaeC544536a6405A2422745b7D7EBA7655844554B",
    "transactionIndex": 3,
    "gasUsed": "623618",
    "logsBloom": "0x
    "blockHash": "0xc43edd9f5002adc4e74c262cbe9eba8e07d9b543020395f36c112c41ed360ec5",
    "transactionHash": "0xef64da0cc5e80b07d4542b95fdc49acf3f92e4760cf603eae1fae50ccd3e090b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 35510803,
        "transactionHash": "0xef64da0cc5e80b07d4542b95fdc49acf3f92e4760cf603eae1fae50ccd3e090b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad88438f0df2939e383648d7d2c783c47086a5e6",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000352c4120c5e000000000000000000000000000000000000000000000000008a7febd5ea38698b00000000000000000000000000000000000000000000311e99b6acdc3272d7c60000000000000000000000000000000000000000000000008a7c9911d82c0b8b00000000000000000000000000000000000000000000311e99b9ffa0447f35c6",
        "logIndex": 7,
        "blockHash": "0xc43edd9f5002adc4e74c262cbe9eba8e07d9b543020395f36c112c41ed360ec5"
      }
    ],
    "blockNumber": 35510803,
    "cumulativeGasUsed": "780413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f70961aa2205e5141e4dcdd03ebc0c83",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InitializationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc6551/ERC6551Registry.sol\":\"ERC6551Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafc07f37809f74d9c66d6461cc0f85fb5147ab855acd0acc30af4b2272130c61\",\"license\":\"MIT\"},\"contracts/erc6551/ERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"./interfaces/IERC6551Registry.sol\\\";\\nimport \\\"./interfaces/IERC6551Account.sol\\\";\\nimport \\\"./lib/ERC6551BytecodeLib.sol\\\";\\n\\ncontract ERC6551Registry is IERC6551Registry {\\n    error InitializationFailed();\\n\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt,\\n        bytes calldata initData\\n    ) external returns (address) {\\n        bytes memory code = ERC6551BytecodeLib.getCreationCode(\\n            implementation,\\n            chainId,\\n            tokenContract,\\n            tokenId,\\n            salt\\n        );\\n\\n        address _account = Create2.computeAddress(\\n            bytes32(salt),\\n            keccak256(code)\\n        );\\n\\n        if (_account.code.length != 0) return _account;\\n\\n        emit AccountCreated(\\n            _account,\\n            implementation,\\n            chainId,\\n            tokenContract,\\n            tokenId,\\n            salt\\n        );\\n\\n        _account = Create2.deploy(0, bytes32(salt), code);\\n\\n        if (initData.length != 0) {\\n            (bool success, ) = _account.call(initData);\\n            if (!success) revert InitializationFailed();\\n        }\\n\\n        return _account;\\n    }\\n\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address) {\\n        bytes32 bytecodeHash = keccak256(\\n            ERC6551BytecodeLib.getCreationCode(\\n                implementation,\\n                chainId,\\n                tokenContract,\\n                tokenId,\\n                salt\\n            )\\n        );\\n\\n        return Create2.computeAddress(bytes32(salt), bytecodeHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2e72cca0d1134725d9b3ac922d1bc166ae07c605cf920789a7da2bec8cb27d6a\",\"license\":\"UNLICENSED\"},\"contracts/erc6551/interfaces/IERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IERC6551AccountProxy {\\n    function implementation() external view returns (address);\\n}\\n\\n/// @dev the ERC-165 identifier for this interface is `0xeff4d378`\\ninterface IERC6551Account {\\n    event TransactionExecuted(address indexed target, uint256 indexed value, bytes data);\\n\\n    receive() external payable;\\n\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n\\n    function token()\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address tokenContract,\\n            uint256 tokenId\\n        );\\n\\n    function owner() external view returns (address);\\n\\n    function nonce() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb47d8185a8b94dff898d73e3c9f49122f42ef060544d92ef743ef7299206015f\",\"license\":\"UNLICENSED\"},\"contracts/erc6551/interfaces/IERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IERC6551Registry {\\n    event AccountCreated(\\n        address account,\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    );\\n\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 seed,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd592a5c45d41d32199f3ad7bce74bc3220253be74bb788c6ea94bdb73a2593b9\",\"license\":\"UNLICENSED\"},\"contracts/erc6551/lib/ERC6551BytecodeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ERC6551BytecodeLib {\\n    function getCreationCode(\\n        address implementation_,\\n        uint256 chainId_,\\n        address tokenContract_,\\n        uint256 tokenId_,\\n        uint256 salt_\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                hex\\\"3d60ad80600a3d3981f3363d3d373d3d3d363d73\\\",\\n                implementation_,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                abi.encode(salt_, chainId_, tokenContract_, tokenId_)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa318f11a48b3ef8c8ffb874925dea296092794fdc004a959b068bf6c3b14d426\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a5b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635e9bc5361461003b578063da7323b31461006b575b600080fd5b61005560048036038101906100509190610472565b61009b565b60405161006291906104fc565b60405180910390f35b6100856004803603810190610080919061057c565b6100cd565b60405161009291906104fc565b60405180910390f35b6000806100ab8787878787610236565b8051906020012090506100c18360001b8261028a565b91505095945050505050565b6000806100dd8989898989610236565b905060006100f58660001b838051906020012061028a565b905060008173ffffffffffffffffffffffffffffffffffffffff163b1461012057809250505061022b565b7f07fba7bba1191da7ee1155dcfa0030701c9c9a9cc34a93b991fc6fd0c9268d8f818b8b8b8b8b6040516101599695949392919061063a565b60405180910390a161017060008760001b8461029f565b9050600085859050146102255760008173ffffffffffffffffffffffffffffffffffffffff1686866040516101a69291906106da565b6000604051808303816000865af19150503d80600081146101e3576040519150601f19603f3d011682016040523d82523d6000602084013e6101e8565b606091505b5050905080610223576040517f19b991a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b80925050505b979650505050505050565b6060858286868660405160200161025094939291906106f3565b604051602081830303815290604052604051602001610270929190610892565b604051602081830303815290604052905095945050505050565b60006102978383306103a9565b905092915050565b6000834710156102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db9061092d565b60405180910390fd5b6000825103610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90610999565b60405180910390fd5b8282516020840186f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039990610a05565b60405180910390fd5b9392505050565b6000604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610409826103de565b9050919050565b610419816103fe565b811461042457600080fd5b50565b60008135905061043681610410565b92915050565b6000819050919050565b61044f8161043c565b811461045a57600080fd5b50565b60008135905061046c81610446565b92915050565b600080600080600060a0868803121561048e5761048d6103d4565b5b600061049c88828901610427565b95505060206104ad8882890161045d565b94505060406104be88828901610427565b93505060606104cf8882890161045d565b92505060806104e08882890161045d565b9150509295509295909350565b6104f6816103fe565b82525050565b600060208201905061051160008301846104ed565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261053c5761053b610517565b5b8235905067ffffffffffffffff8111156105595761055861051c565b5b60208301915083600182028301111561057557610574610521565b5b9250929050565b600080600080600080600060c0888a03121561059b5761059a6103d4565b5b60006105a98a828b01610427565b97505060206105ba8a828b0161045d565b96505060406105cb8a828b01610427565b95505060606105dc8a828b0161045d565b94505060806105ed8a828b0161045d565b93505060a088013567ffffffffffffffff81111561060e5761060d6103d9565b5b61061a8a828b01610526565b925092505092959891949750929550565b6106348161043c565b82525050565b600060c08201905061064f60008301896104ed565b61065c60208301886104ed565b610669604083018761062b565b61067660608301866104ed565b610683608083018561062b565b61069060a083018461062b565b979650505050505050565b600081905092915050565b82818337600083830152505050565b60006106c1838561069b565b93506106ce8385846106a6565b82840190509392505050565b60006106e78284866106b5565b91508190509392505050565b6000608082019050610708600083018761062b565b610715602083018661062b565b61072260408301856104ed565b61072f606083018461062b565b95945050505050565b600081905092915050565b7f3d60ad80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000600082015250565b6000610779601483610738565b915061078482610743565b601482019050919050565b60008160601b9050919050565b60006107a78261078f565b9050919050565b60006107b98261079c565b9050919050565b6107d16107cc826103fe565b6107ae565b82525050565b7f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000600082015250565b600061080d600f83610738565b9150610818826107d7565b600f82019050919050565b600081519050919050565b60005b8381101561084c578082015181840152602081019050610831565b8381111561085b576000848401525b50505050565b600061086c82610823565b610876818561069b565b935061088681856020860161082e565b80840191505092915050565b600061089d8261076c565b91506108a982856107c0565b6014820191506108b882610800565b91506108c48284610861565b91508190509392505050565b600082825260208201905092915050565b7f437265617465323a20696e73756666696369656e742062616c616e6365000000600082015250565b6000610917601d836108d0565b9150610922826108e1565b602082019050919050565b600060208201905081810360008301526109468161090a565b9050919050565b7f437265617465323a2062797465636f6465206c656e677468206973207a65726f600082015250565b60006109836020836108d0565b915061098e8261094d565b602082019050919050565b600060208201905081810360008301526109b281610976565b9050919050565b7f437265617465323a204661696c6564206f6e206465706c6f7900000000000000600082015250565b60006109ef6019836108d0565b91506109fa826109b9565b602082019050919050565b60006020820190508181036000830152610a1e816109e2565b905091905056fea264697066735822122008fa496b39629eab0d5546aa6fd29df6fd4a5ecc35fe17645e3a2f84ea7e0b7564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635e9bc5361461003b578063da7323b31461006b575b600080fd5b61005560048036038101906100509190610472565b61009b565b60405161006291906104fc565b60405180910390f35b6100856004803603810190610080919061057c565b6100cd565b60405161009291906104fc565b60405180910390f35b6000806100ab8787878787610236565b8051906020012090506100c18360001b8261028a565b91505095945050505050565b6000806100dd8989898989610236565b905060006100f58660001b838051906020012061028a565b905060008173ffffffffffffffffffffffffffffffffffffffff163b1461012057809250505061022b565b7f07fba7bba1191da7ee1155dcfa0030701c9c9a9cc34a93b991fc6fd0c9268d8f818b8b8b8b8b6040516101599695949392919061063a565b60405180910390a161017060008760001b8461029f565b9050600085859050146102255760008173ffffffffffffffffffffffffffffffffffffffff1686866040516101a69291906106da565b6000604051808303816000865af19150503d80600081146101e3576040519150601f19603f3d011682016040523d82523d6000602084013e6101e8565b606091505b5050905080610223576040517f19b991a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b80925050505b979650505050505050565b6060858286868660405160200161025094939291906106f3565b604051602081830303815290604052604051602001610270929190610892565b604051602081830303815290604052905095945050505050565b60006102978383306103a9565b905092915050565b6000834710156102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db9061092d565b60405180910390fd5b6000825103610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90610999565b60405180910390fd5b8282516020840186f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039990610a05565b60405180910390fd5b9392505050565b6000604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610409826103de565b9050919050565b610419816103fe565b811461042457600080fd5b50565b60008135905061043681610410565b92915050565b6000819050919050565b61044f8161043c565b811461045a57600080fd5b50565b60008135905061046c81610446565b92915050565b600080600080600060a0868803121561048e5761048d6103d4565b5b600061049c88828901610427565b95505060206104ad8882890161045d565b94505060406104be88828901610427565b93505060606104cf8882890161045d565b92505060806104e08882890161045d565b9150509295509295909350565b6104f6816103fe565b82525050565b600060208201905061051160008301846104ed565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261053c5761053b610517565b5b8235905067ffffffffffffffff8111156105595761055861051c565b5b60208301915083600182028301111561057557610574610521565b5b9250929050565b600080600080600080600060c0888a03121561059b5761059a6103d4565b5b60006105a98a828b01610427565b97505060206105ba8a828b0161045d565b96505060406105cb8a828b01610427565b95505060606105dc8a828b0161045d565b94505060806105ed8a828b0161045d565b93505060a088013567ffffffffffffffff81111561060e5761060d6103d9565b5b61061a8a828b01610526565b925092505092959891949750929550565b6106348161043c565b82525050565b600060c08201905061064f60008301896104ed565b61065c60208301886104ed565b610669604083018761062b565b61067660608301866104ed565b610683608083018561062b565b61069060a083018461062b565b979650505050505050565b600081905092915050565b82818337600083830152505050565b60006106c1838561069b565b93506106ce8385846106a6565b82840190509392505050565b60006106e78284866106b5565b91508190509392505050565b6000608082019050610708600083018761062b565b610715602083018661062b565b61072260408301856104ed565b61072f606083018461062b565b95945050505050565b600081905092915050565b7f3d60ad80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000600082015250565b6000610779601483610738565b915061078482610743565b601482019050919050565b60008160601b9050919050565b60006107a78261078f565b9050919050565b60006107b98261079c565b9050919050565b6107d16107cc826103fe565b6107ae565b82525050565b7f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000600082015250565b600061080d600f83610738565b9150610818826107d7565b600f82019050919050565b600081519050919050565b60005b8381101561084c578082015181840152602081019050610831565b8381111561085b576000848401525b50505050565b600061086c82610823565b610876818561069b565b935061088681856020860161082e565b80840191505092915050565b600061089d8261076c565b91506108a982856107c0565b6014820191506108b882610800565b91506108c48284610861565b91508190509392505050565b600082825260208201905092915050565b7f437265617465323a20696e73756666696369656e742062616c616e6365000000600082015250565b6000610917601d836108d0565b9150610922826108e1565b602082019050919050565b600060208201905081810360008301526109468161090a565b9050919050565b7f437265617465323a2062797465636f6465206c656e677468206973207a65726f600082015250565b60006109836020836108d0565b915061098e8261094d565b602082019050919050565b600060208201905081810360008301526109b281610976565b9050919050565b7f437265617465323a204661696c6564206f6e206465706c6f7900000000000000600082015250565b60006109ef6019836108d0565b91506109fa826109b9565b602082019050919050565b60006020820190508181036000830152610a1e816109e2565b905091905056fea264697066735822122008fa496b39629eab0d5546aa6fd29df6fd4a5ecc35fe17645e3a2f84ea7e0b7564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}