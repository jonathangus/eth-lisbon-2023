/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AccountProxy,
  AccountProxyInterface,
} from "../../../contracts/account/AccountProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_guardian",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610589380380610589833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610473610116600039600060b101526104736000f3fe6080604052600436106100225760003560e01c80638129fc1c1461003b57610031565b366100315761002f610052565b005b610039610052565b005b34801561004757600080fd5b5061005061006c565b005b61005a610147565b61006a610065610149565b610158565b565b600061007661017e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610144576101437f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b39c45936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013e919061036d565b6101d5565b5b50565b565b600061015361017e565b905090565b3660008037600080366000845af43d6000803e8060008114610179573d6000f35b3d6000fd5b60006101ac7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610224565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101de8161022e565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000819050919050565b610237816102e7565b610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026d9061041d565b60405180910390fd5b806102a37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610224565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061033a8261030f565b9050919050565b61034a8161032f565b811461035557600080fd5b50565b60008151905061036781610341565b92915050565b6000602082840312156103835761038261030a565b5b600061039184828501610358565b91505092915050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000610407602d8361039a565b9150610412826103ab565b604082019050919050565b60006020820190508181036000830152610436816103fa565b905091905056fea264697066735822122003a188e987267e87688dd8c2e9ca4e9a88efd4d03d4d8e8964f1cb414829218764736f6c63430008120033";

type AccountProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountProxy__factory extends ContractFactory {
  constructor(...args: AccountProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AccountProxy> {
    return super.deploy(_guardian, overrides || {}) as Promise<AccountProxy>;
  }
  override getDeployTransaction(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_guardian, overrides || {});
  }
  override attach(address: string): AccountProxy {
    return super.attach(address) as AccountProxy;
  }
  override connect(signer: Signer): AccountProxy__factory {
    return super.connect(signer) as AccountProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountProxyInterface {
    return new utils.Interface(_abi) as AccountProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountProxy {
    return new Contract(address, _abi, signerOrProvider) as AccountProxy;
  }
}
