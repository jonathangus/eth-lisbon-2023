/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockProfileCreationProxy,
  MockProfileCreationProxyInterface,
} from "../../../contracts/lens/MockProfileCreationProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ILensHub",
        name: "hub",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "HandleContainsInvalidCharacters",
    type: "error",
  },
  {
    inputs: [],
    name: "HandleFirstCharInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "HandleLengthInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "string",
            name: "handle",
            type: "string",
          },
          {
            internalType: "string",
            name: "imageURI",
            type: "string",
          },
          {
            internalType: "address",
            name: "followModule",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "followModuleInitData",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "followNFTURI",
            type: "string",
          },
        ],
        internalType: "struct DataTypes.CreateProfileData",
        name: "vars",
        type: "tuple",
      },
    ],
    name: "proxyCreateProfile",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610b54380380610b54833981810160405281019061003291906100e1565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b60006100ae82610091565b9050919050565b6100be816100a3565b81146100c957600080fd5b50565b6000815190506100db816100b5565b92915050565b6000602082840312156100f7576100f661006c565b5b6000610105848285016100cc565b91505092915050565b608051610a2b61012960003960006102b10152610a2b6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806307e5f94814610030575b600080fd5b61004a600480360381019061004591906106c4565b61004c565b005b600081602001515190506005811015610091576040517f3eb64ab300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082602001516000815181106100ab576100aa61070d565b5b602001015160f81c60f81b90507f2d00000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061014957507f5f00000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061019557507f2e00000000000000000000000000000000000000000000000000000000000000817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156101cc576040517f5e58454e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600190505b82811015610282577f2e00000000000000000000000000000000000000000000000000000000000000846020015182815181106102135761021261070d565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610277576040517f2edfc66c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010190506101d3565b5082602001516040516020016102989190610802565b60405160208183030381529060405283602001819052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ffea138e846040518263ffffffff1660e01b81526004016103089190610970565b6020604051808303816000875af1158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b91906109c8565b50505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103b38261036a565b810181811067ffffffffffffffff821117156103d2576103d161037b565b5b80604052505050565b60006103e5610351565b90506103f182826103aa565b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610426826103fb565b9050919050565b6104368161041b565b811461044157600080fd5b50565b6000813590506104538161042d565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561047e5761047d61037b565b5b6104878261036a565b9050602081019050919050565b82818337600083830152505050565b60006104b66104b184610463565b6103db565b9050828152602081018484840111156104d2576104d161045e565b5b6104dd848285610494565b509392505050565b600082601f8301126104fa576104f9610459565b5b813561050a8482602086016104a3565b91505092915050565b600067ffffffffffffffff82111561052e5761052d61037b565b5b6105378261036a565b9050602081019050919050565b600061055761055284610513565b6103db565b9050828152602081018484840111156105735761057261045e565b5b61057e848285610494565b509392505050565b600082601f83011261059b5761059a610459565b5b81356105ab848260208601610544565b91505092915050565b600060c082840312156105ca576105c9610365565b5b6105d460c06103db565b905060006105e484828501610444565b600083015250602082013567ffffffffffffffff811115610608576106076103f6565b5b610614848285016104e5565b602083015250604082013567ffffffffffffffff811115610638576106376103f6565b5b610644848285016104e5565b604083015250606061065884828501610444565b606083015250608082013567ffffffffffffffff81111561067c5761067b6103f6565b5b61068884828501610586565b60808301525060a082013567ffffffffffffffff8111156106ac576106ab6103f6565b5b6106b8848285016104e5565b60a08301525092915050565b6000602082840312156106da576106d961035b565b5b600082013567ffffffffffffffff8111156106f8576106f7610360565b5b610704848285016105b4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015610770578082015181840152602081019050610755565b8381111561077f576000848401525b50505050565b60006107908261073c565b61079a8185610747565b93506107aa818560208601610752565b80840191505092915050565b7f2e74657374000000000000000000000000000000000000000000000000000000600082015250565b60006107ec600583610747565b91506107f7826107b6565b600582019050919050565b600061080e8284610785565b9150610819826107df565b915081905092915050565b61082d8161041b565b82525050565b600082825260208201905092915050565b600061084f8261073c565b6108598185610833565b9350610869818560208601610752565b6108728161036a565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b60006108a48261087d565b6108ae8185610888565b93506108be818560208601610752565b6108c78161036a565b840191505092915050565b600060c0830160008301516108ea6000860182610824565b50602083015184820360208601526109028282610844565b9150506040830151848203604086015261091c8282610844565b91505060608301516109316060860182610824565b50608083015184820360808601526109498282610899565b91505060a083015184820360a08601526109638282610844565b9150508091505092915050565b6000602082019050818103600083015261098a81846108d2565b905092915050565b6000819050919050565b6109a581610992565b81146109b057600080fd5b50565b6000815190506109c28161099c565b92915050565b6000602082840312156109de576109dd61035b565b5b60006109ec848285016109b3565b9150509291505056fea2646970667358221220278d24db88056283c43ffac1eecf5ae6f0fdea45099e22dc2d5c123acfc339c664736f6c634300080d0033";

type MockProfileCreationProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockProfileCreationProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockProfileCreationProxy__factory extends ContractFactory {
  constructor(...args: MockProfileCreationProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    hub: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockProfileCreationProxy> {
    return super.deploy(
      hub,
      overrides || {}
    ) as Promise<MockProfileCreationProxy>;
  }
  override getDeployTransaction(
    hub: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(hub, overrides || {});
  }
  override attach(address: string): MockProfileCreationProxy {
    return super.attach(address) as MockProfileCreationProxy;
  }
  override connect(signer: Signer): MockProfileCreationProxy__factory {
    return super.connect(signer) as MockProfileCreationProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockProfileCreationProxyInterface {
    return new utils.Interface(_abi) as MockProfileCreationProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockProfileCreationProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockProfileCreationProxy;
  }
}
