/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AccountGuardianInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "defaultImplementation()": FunctionFragment;
    "isTrustedExecutor(address)": FunctionFragment;
    "isTrustedImplementation(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultImplementation(address)": FunctionFragment;
    "setTrustedExecutor(address,bool)": FunctionFragment;
    "setTrustedImplementation(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "acceptOwnership()"
      | "defaultImplementation"
      | "defaultImplementation()"
      | "isTrustedExecutor"
      | "isTrustedExecutor(address)"
      | "isTrustedImplementation"
      | "isTrustedImplementation(address)"
      | "owner"
      | "owner()"
      | "pendingOwner"
      | "pendingOwner()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "setDefaultImplementation"
      | "setDefaultImplementation(address)"
      | "setTrustedExecutor"
      | "setTrustedExecutor(address,bool)"
      | "setTrustedImplementation"
      | "setTrustedImplementation(address,bool)"
      | "transferOwnership"
      | "transferOwnership(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultImplementation()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedExecutor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedExecutor(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedImplementation(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultImplementation(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedExecutor",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedExecutor(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedImplementation",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedImplementation(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultImplementation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedExecutor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedImplementation(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultImplementation(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedExecutor(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedImplementation(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;

  events: {
    "DefaultImplementationUpdated(address)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TrustedExecutorUpdated(address,bool)": EventFragment;
    "TrustedImplementationUpdated(address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DefaultImplementationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultImplementationUpdated(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferStarted(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedExecutorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TrustedExecutorUpdated(address,bool)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TrustedImplementationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TrustedImplementationUpdated(address,bool)"
  ): EventFragment;
}

export interface DefaultImplementationUpdatedEventObject {
  implementation: string;
}
export type DefaultImplementationUpdatedEvent = TypedEvent<
  [string],
  DefaultImplementationUpdatedEventObject
>;

export type DefaultImplementationUpdatedEventFilter =
  TypedEventFilter<DefaultImplementationUpdatedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TrustedExecutorUpdatedEventObject {
  executor: string;
  trusted: boolean;
}
export type TrustedExecutorUpdatedEvent = TypedEvent<
  [string, boolean],
  TrustedExecutorUpdatedEventObject
>;

export type TrustedExecutorUpdatedEventFilter =
  TypedEventFilter<TrustedExecutorUpdatedEvent>;

export interface TrustedImplementationUpdatedEventObject {
  implementation: string;
  trusted: boolean;
}
export type TrustedImplementationUpdatedEvent = TypedEvent<
  [string, boolean],
  TrustedImplementationUpdatedEventObject
>;

export type TrustedImplementationUpdatedEventFilter =
  TypedEventFilter<TrustedImplementationUpdatedEvent>;

export interface AccountGuardian extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountGuardianInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    "defaultImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    isTrustedExecutor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedExecutor(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedImplementation(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDefaultImplementation(address)"(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedExecutor(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTrustedExecutor(address,bool)"(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedImplementation(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTrustedImplementation(address,bool)"(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultImplementation(overrides?: CallOverrides): Promise<string>;

  "defaultImplementation()"(overrides?: CallOverrides): Promise<string>;

  isTrustedExecutor(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedExecutor(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedImplementation(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedImplementation(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultImplementation(
    implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDefaultImplementation(address)"(
    implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedExecutor(
    executor: PromiseOrValue<string>,
    trusted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTrustedExecutor(address,bool)"(
    executor: PromiseOrValue<string>,
    trusted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedImplementation(
    implementation: PromiseOrValue<string>,
    trusted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTrustedImplementation(address,bool)"(
    implementation: PromiseOrValue<string>,
    trusted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    defaultImplementation(overrides?: CallOverrides): Promise<string>;

    "defaultImplementation()"(overrides?: CallOverrides): Promise<string>;

    isTrustedExecutor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedExecutor(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedImplementation(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDefaultImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDefaultImplementation(address)"(
      implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedExecutor(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTrustedExecutor(address,bool)"(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedImplementation(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTrustedImplementation(address,bool)"(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DefaultImplementationUpdated(address)"(
      implementation?: null
    ): DefaultImplementationUpdatedEventFilter;
    DefaultImplementationUpdated(
      implementation?: null
    ): DefaultImplementationUpdatedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TrustedExecutorUpdated(address,bool)"(
      executor?: null,
      trusted?: null
    ): TrustedExecutorUpdatedEventFilter;
    TrustedExecutorUpdated(
      executor?: null,
      trusted?: null
    ): TrustedExecutorUpdatedEventFilter;

    "TrustedImplementationUpdated(address,bool)"(
      implementation?: null,
      trusted?: null
    ): TrustedImplementationUpdatedEventFilter;
    TrustedImplementationUpdated(
      implementation?: null,
      trusted?: null
    ): TrustedImplementationUpdatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedExecutor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedExecutor(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedImplementation(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDefaultImplementation(address)"(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedExecutor(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTrustedExecutor(address,bool)"(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedImplementation(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTrustedImplementation(address,bool)"(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "defaultImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedExecutor(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedExecutor(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedImplementation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedImplementation(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultImplementation(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDefaultImplementation(address)"(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedExecutor(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTrustedExecutor(address,bool)"(
      executor: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedImplementation(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTrustedImplementation(address,bool)"(
      implementation: PromiseOrValue<string>,
      trusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
